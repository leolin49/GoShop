// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stock.proto

package stockpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockService_GetStock_FullMethodName         = "/stock.StockService/GetStock"
	StockService_AddStock_FullMethodName         = "/stock.StockService/AddStock"
	StockService_SubStock_FullMethodName         = "/stock.StockService/SubStock"
	StockService_FlashStock_FullMethodName       = "/stock.StockService/FlashStock"
	StockService_FlashCacheWarmUp_FullMethodName = "/stock.StockService/FlashCacheWarmUp"
	StockService_FlashCacheClear_FullMethodName  = "/stock.StockService/FlashCacheClear"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	GetStock(ctx context.Context, in *ReqGetStock, opts ...grpc.CallOption) (*RspGetStock, error)
	AddStock(ctx context.Context, in *ReqAddStock, opts ...grpc.CallOption) (*RspAddStock, error)
	SubStock(ctx context.Context, in *ReqSubStock, opts ...grpc.CallOption) (*RspSubStock, error)
	FlashStock(ctx context.Context, in *ReqFlashStock, opts ...grpc.CallOption) (*RspFlashStock, error)
	FlashCacheWarmUp(ctx context.Context, in *ReqFlashCacheWarmUp, opts ...grpc.CallOption) (*RspFlashCacheWarmUp, error)
	FlashCacheClear(ctx context.Context, in *ReqFlashCacheClear, opts ...grpc.CallOption) (*RspFlashCacheClear, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStock(ctx context.Context, in *ReqGetStock, opts ...grpc.CallOption) (*RspGetStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspGetStock)
	err := c.cc.Invoke(ctx, StockService_GetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) AddStock(ctx context.Context, in *ReqAddStock, opts ...grpc.CallOption) (*RspAddStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspAddStock)
	err := c.cc.Invoke(ctx, StockService_AddStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) SubStock(ctx context.Context, in *ReqSubStock, opts ...grpc.CallOption) (*RspSubStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspSubStock)
	err := c.cc.Invoke(ctx, StockService_SubStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) FlashStock(ctx context.Context, in *ReqFlashStock, opts ...grpc.CallOption) (*RspFlashStock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspFlashStock)
	err := c.cc.Invoke(ctx, StockService_FlashStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) FlashCacheWarmUp(ctx context.Context, in *ReqFlashCacheWarmUp, opts ...grpc.CallOption) (*RspFlashCacheWarmUp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspFlashCacheWarmUp)
	err := c.cc.Invoke(ctx, StockService_FlashCacheWarmUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) FlashCacheClear(ctx context.Context, in *ReqFlashCacheClear, opts ...grpc.CallOption) (*RspFlashCacheClear, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RspFlashCacheClear)
	err := c.cc.Invoke(ctx, StockService_FlashCacheClear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility.
type StockServiceServer interface {
	GetStock(context.Context, *ReqGetStock) (*RspGetStock, error)
	AddStock(context.Context, *ReqAddStock) (*RspAddStock, error)
	SubStock(context.Context, *ReqSubStock) (*RspSubStock, error)
	FlashStock(context.Context, *ReqFlashStock) (*RspFlashStock, error)
	FlashCacheWarmUp(context.Context, *ReqFlashCacheWarmUp) (*RspFlashCacheWarmUp, error)
	FlashCacheClear(context.Context, *ReqFlashCacheClear) (*RspFlashCacheClear, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockServiceServer struct{}

func (UnimplementedStockServiceServer) GetStock(context.Context, *ReqGetStock) (*RspGetStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedStockServiceServer) AddStock(context.Context, *ReqAddStock) (*RspAddStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStock not implemented")
}
func (UnimplementedStockServiceServer) SubStock(context.Context, *ReqSubStock) (*RspSubStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubStock not implemented")
}
func (UnimplementedStockServiceServer) FlashStock(context.Context, *ReqFlashStock) (*RspFlashStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashStock not implemented")
}
func (UnimplementedStockServiceServer) FlashCacheWarmUp(context.Context, *ReqFlashCacheWarmUp) (*RspFlashCacheWarmUp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashCacheWarmUp not implemented")
}
func (UnimplementedStockServiceServer) FlashCacheClear(context.Context, *ReqFlashCacheClear) (*RspFlashCacheClear, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashCacheClear not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}
func (UnimplementedStockServiceServer) testEmbeddedByValue()                      {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_GetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStock(ctx, req.(*ReqGetStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_AddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).AddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_AddStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).AddStock(ctx, req.(*ReqAddStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_SubStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSubStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SubStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_SubStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SubStock(ctx, req.(*ReqSubStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_FlashStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFlashStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).FlashStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_FlashStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).FlashStock(ctx, req.(*ReqFlashStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_FlashCacheWarmUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFlashCacheWarmUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).FlashCacheWarmUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_FlashCacheWarmUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).FlashCacheWarmUp(ctx, req.(*ReqFlashCacheWarmUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_FlashCacheClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFlashCacheClear)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).FlashCacheClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_FlashCacheClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).FlashCacheClear(ctx, req.(*ReqFlashCacheClear))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStock",
			Handler:    _StockService_GetStock_Handler,
		},
		{
			MethodName: "AddStock",
			Handler:    _StockService_AddStock_Handler,
		},
		{
			MethodName: "SubStock",
			Handler:    _StockService_SubStock_Handler,
		},
		{
			MethodName: "FlashStock",
			Handler:    _StockService_FlashStock_Handler,
		},
		{
			MethodName: "FlashCacheWarmUp",
			Handler:    _StockService_FlashCacheWarmUp_Handler,
		},
		{
			MethodName: "FlashCacheClear",
			Handler:    _StockService_FlashCacheClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
